/*
 *	Author: Shrikant Tipartiwar (Embedded_Siri)
 *
 */

#ifndef INC_STM32F407_H_
#define INC_STM32F407_H_

#include<stdint.h>

#define __IO 	volatile

/*
 * Base addresses of Flash and SRAM
*/

#define FLASH_BASEADDR				0x08000000U
#define SRAM1_BASEADDR				0x20000000U
#define SRAM2_BASEADDR				0x20001C00U
#define ROM_BASEADDR				0x1FFF0000U
#define SRAM						SRAM1_BASEADDR


/*
 * AHB and APB Peripheral base addresses
 * - Because our all Peripherals are on these Buses
 */

#define APB1_BASEADDR				0x40000000U
#define APB2_BASEADDR				0x40010000U
#define AHB1_BASEADDR				0x40020000U
#define AHB2_BASEADDR				0x50000000U

/*
 * Addresses of GPIO Peripherals which are on AHB1 Bus
 */

#define GPIOA_BASEADDR				(AHB1_BASEADDR + 0x0000)
#define GPIOB_BASEADDR				(AHB1_BASEADDR + 0x0400)
#define GPIOC_BASEADDR				(AHB1_BASEADDR + 0x0800)
#define GPIOD_BASEADDR				(AHB1_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR				(AHB1_BASEADDR + 0x1000)
#define GPIOF_BASEADDR				(AHB1_BASEADDR + 0x1400)
#define GPIOG_BASEADDR				(AHB1_BASEADDR + 0x1800)
#define GPIOH_BASEADDR				(AHB1_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR				(AHB1_BASEADDR + 0x2000)

#define RCC_BASEADDR                (APB1_BASEADDR + 0x3800)

/*
 * GPIO Peripheral Ragisters Defination Structure
 */

typedef struct {
	__IO uint32_t MODER;
	__IO uint32_t OTYPER;
	__IO uint32_t OSPEEDR;
	__IO uint32_t PUPDR;
	__IO uint32_t IDR;
	__IO uint32_t ODR;
	__IO uint32_t BSSR;
	__IO uint32_t LCKR;
	__IO uint32_t AFR[2];
}GPIO_Registers_t;

/*
 * RCC Peripheral Ragisters Defination Structure
 * - Using RCC structure we can enable or disable clock for particular peripheral or we can reset the peri.
 */

typedef struct {
	__IO uint32_t CR;
	__IO uint32_t PLLCFGR;
	__IO uint32_t CFGR;
	__IO uint32_t AHB1RSTR;
	__IO uint32_t AHB2RSTR;
	__IO uint32_t AHB3RSTR;
	     uint32_t RESERVED0;
	__IO uint32_t APB1RSTR;
	__IO uint32_t APB2RSTR;
    	 uint32_t RESERVED1[2];
    __IO uint32_t AHB1ENR;
    __IO uint32_t AHB2ENR;
    __IO uint32_t AHB3ENR;
         uint32_t RESERVED2;
    __IO uint32_t APB1ENR;
    __IO uint32_t APB2ENR;
         uint32_t RESERVED3[2];
    __IO uint32_t AHB1LPENR;
    __IO uint32_t AHB2LPENR;
    __IO uint32_t AHB3LPENR;
         uint32_t RESERVED4;
    __IO uint32_t APB1LPENR;
    __IO uint32_t APB2LPENR;
         uint32_t RESERVED5[2];
    __IO uint32_t BDCR;
    __IO uint32_t CSR;
         uint32_t RESERVED6[2];
    __IO uint32_t SSCGR;
    __IO uint32_t PLLI2SCFGR;
    __IO uint32_t PLLSAICFGR;
    __IO uint32_t DCKCFGR;
    __IO uint32_t CKGATENR;
    __IO uint32_t DCKCFGR2;

}RCC_Registers_t;

/*
 * GPIO Peripheral Addresses typecasted to GPIO_RegDef_t Structure
 * -We have Type_casted GPIOx_Base_addresses to GPIO_Registers_t
 *  because by doing this we can easly access the gpio registers of particular port
 *  just by structure.
 */

#define GPIOA 						((GPIO_Registers_t*)GPIOA_BASEADDR)
#define GPIOB 						((GPIO_Registers_t*)GPIOB_BASEADDR)
#define GPIOC 						((GPIO_Registers_t*)GPIOC_BASEADDR)
#define GPIOD 						((GPIO_Registers_t*)GPIOD_BASEADDR)
#define GPIOE 						((GPIO_Registers_t*)GPIOE_BASEADDR)
#define GPIOF 						((GPIO_Registers_t*)GPIOF_BASEADDR)
#define GPIOG 						((GPIO_Registers_t*)GPIOG_BASEADDR)
#define GPIOH 						((GPIO_Registers_t*)GPIOH_BASEADDR)
#define GPIOI 						((GPIO_Registers_t*)GPIOI_BASEADDR)

#define RCC							((RCC_Registers_t*)RCC_BASEADDR)

/*
 * Clock Enable Macros for GPIO Peripherals
 */

#define GPIOA_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 7))
#define GPIOI_PERI_CLK_EN()			(RCC->AHB1ENR |= (1 << 8))


/*
 * Clock Disable Macros for GPIO Peripherals
 */

#define GPIOA_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 0))
#define GPIOB_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 4))
#define GPIOF_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 5))
#define GPIOG_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 6))
#define GPIOH_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 7))
#define GPIOI_PERI_CLK_DI()			(RCC->AHB1ENR &= ~(1 << 8))


/*
 * Macros to reset GPIO Peripheral
 */

#define	GPIOA_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1 << 0)); }while(0)
#define	GPIOB_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1 << 1)); }while(0)
#define	GPIOC_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1 << 2)); }while(0)
#define	GPIOD_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1 << 3)); }while(0)
#define	GPIOE_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1 << 4)); }while(0)
#define	GPIOF_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1 << 5)); }while(0)
#define	GPIOG_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1 << 6)); }while(0)
#define	GPIOH_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1 << 7)); }while(0)
#define	GPIOI_REG_RESET()			do{ (RCC->AHB1RSTR |= (1 << 8)); (RCC->AHB1RSTR &= ~(1 << 8)); }while(0)

/*----------------------------------------------------------------------------------------------------------------*/

// Generic Macros

#define ENABLE					1
#define DISABLE					0
#define SET						ENABLE
#define RESET					DISABLE
#define GPIO_PIN_SET			SET
#define GPIO_PIN_RESET			RESET
















#endif /* INC_STM32F407_H_ */
