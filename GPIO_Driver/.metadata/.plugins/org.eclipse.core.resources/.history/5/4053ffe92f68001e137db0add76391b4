/*
 * stm32f407_gpio_driver.c
 *
 *  Created on: Oct 9, 2023
 *      Author: SHRIKANT
 */

#include "stm32f407_gpio_driver.h"


// Peripheral Clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t en_di)
{
	if (en_di == ENABLE){

		if (pGPIOx == GPIOA) {
			GPIOA_PERI_CLK_EN();
		}else if (pGPIOx == GPIOB) {
			GPIOB_PERI_CLK_EN();
		}else if (pGPIOx == GPIOC) {
			GPIOC_PERI_CLK_EN();
		}else if (pGPIOx == GPIOD) {
			GPIOD_PERI_CLK_EN();
		}else if (pGPIOx == GPIOE) {
			GPIOE_PERI_CLK_EN();
		}else if (pGPIOx == GPIOF) {
			GPIOF_PERI_CLK_EN();
		}else if (pGPIOx == GPIOG) {
			GPIOG_PERI_CLK_EN();
		}else if (pGPIOx == GPIOH) {
			GPIOH_PERI_CLK_EN();
		}else if (pGPIOx == GPIOI) {
			GPIOI_PERI_CLK_EN();
		}

	}else {

		if (pGPIOx == GPIOA) {
			GPIOA_PERI_CLK_DI();
		}else if (pGPIOx == GPIOB) {
			GPIOB_PERI_CLK_DI();
		}else if (pGPIOx == GPIOC) {
			GPIOC_PERI_CLK_DI();
		}else if (pGPIOx == GPIOD) {
			GPIOD_PERI_CLK_DI();
		}else if (pGPIOx == GPIOE) {
			GPIOE_PERI_CLK_DI();
		}else if (pGPIOx == GPIOF) {
			GPIOF_PERI_CLK_DI();
		}else if (pGPIOx == GPIOG) {
			GPIOG_PERI_CLK_DI();
		}else if (pGPIOx == GPIOH) {
			GPIOH_PERI_CLK_DI();
		}else if (pGPIOx == GPIOI) {
			GPIOI_PERI_CLK_DI();
		}
	}
}


// Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp = 0;
	// 1. Configure the mode of gpio pin

	if (pGPIOHandle->GPIO_Config.GPIO_PinMode <= GPIO_MODE_ANALOG){

		temp = (pGPIOHandle->GPIO_Config.GPIO_PinMode << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // Clearing the bits
		pGPIOHandle->pGPIOx->MODER |= temp; // Setting the bits

	} else {

		// Interrupt mode
	}

	temp = 0;

	// 2. Configure the speed

	temp = (pGPIOHandle->GPIO_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // Clearing the bits
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Setting the bits

	temp = 0;

	// 3. Configure the PuPd settings

	temp = (pGPIOHandle->GPIO_Config.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // Clearing the bits
	pGPIOHandle->pGPIOx->PUPDR |= temp; // Setting the bits

	temp = 0;

	// 4. Configure the optype

	temp = (pGPIOHandle->GPIO_Config.GPIO_PinOPType << (pGPIOHandle->GPIO_Config.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // Clearing the bits
	pGPIOHandle->pGPIOx->OTYPER |= temp; // Setting the bits

	temp = 0;

	// 5. Configure the alternate function

	if (pGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_MODE_ALTFN) {

		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_Config.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_Config.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 * temp2));
	}
}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

// Data Read and Write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{

}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{

}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{

}

void GPIO_ToggleOutPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

// IRQ Configuration and ISR handling
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t en_di)
{

}

void GPIO_IRQHandling(uint8_t PinNumber)
{

}
